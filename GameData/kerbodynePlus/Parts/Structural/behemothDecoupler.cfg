PART
{
	name = behemothDecoupler
	module = Part
	author = Bonus Eventus

	MODEL
	{
		model = kerbodynePlus/Parts/Fuel/behemothDecoupler
		scale = 1.25,1.25,1.25
	}

	rescaleFactor = 1
	scale = 1.25
	node_stack_top = 0.0, 0.25, 0.00, 0.0, 1.0, 0.0, 6
	node_stack_bottom = 0.0, -0.25, 0.00, 0.0, -1.0, 0.0, 6
	buoyancy = 0.5
	fx_gasBurst_white = 0.0, 0.0650517, 0.0, 0.0, 1.0, 0.0, decouple
	sound_vent_large = decouple
	TechRequired = largeVolumeContainment
	entryCost = 4800
	cost = 2400
	category = Structural
	subcategory = 0
	title = Kerbodyne PFR-6 
	manufacturer = Kerbodyne
	description =  The Kerbodyne PFR-6 pyrotechnic fastener is used to separate second or third stages for our size 6 class of fuel tanks. 
	// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
	attachRules = 1,0,1,1,0
	mass = 3.2
	dragModelType = default
	maximum_drag = 0.3
	minimum_drag = 0.2
	angularDrag = 1
	crashTolerance = 20
    	breakingForce = 400
    	breakingTorque = 400
    	maxTemp = 3400
	//skinThermalMassModifier
	//skinSkinConductionMult // default = 1.0
	//skinMaxTemp // default = maxTemp
	///skinInternalConductionMult = 0.5 // default 1.0 // halves the rate of skin to internal flux
	skinMaxTemp = 2500
	emissiveConstant = 0.8
    	fuelCrossFeed = False
	PhysicsSignificance = 1
	stageOffset = 1
	childStageOffset = 1
	bulkheadProfiles = kp, behemoth, size6
	tags = kerbodynePlus kerbodyne kp behemoth ascent launch break decouple separat split stag
	MODULE
	{
		name = ModuleDecouple
		ejectionForce = 1600
		explosiveNodeID = top
	}
	MODULE
	{
		name = ModuleToggleCrossfeed
		crossfeedStatus = false
		toggleEditor = true
		toggleFlight = true
	}
	MODULE
	{
		name = ModuleTestSubject
		useStaging = True
		useEvent = False
		situationMask = 127
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT
		{
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = GT
			value = 0 // this just registers altitude as something to care about
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT
		{
			type = SPEED
			test = LT
			value = 2000
			situationMask = 8
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT
		{
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
	}
}

